---
# This playbook contains common plays that will be run on all nodes.

# Install first set of needed packages
- name: install lots of packages
  become: yes
  become_user: root
  apt:
    name:
      - screen
      - vim
      - git
      - linux-image-generic
      - linux-headers-generic
      - python
      - python3
      - subversion
      - links
      - lynx
      - fdutils
      - linux-tools-generic
      - build-essential
      - libssl-dev
      - python-dev
      - python3-dev
      - liblapack-dev
      - libatlas-base-dev
      - gfortran
      - pkg-config
      - zlib1g-dev
      - libpng-dev
      - libfreetype6-dev
      - libxml2-dev
      - libffi-dev
      - libxml2
      - libxslt1-dev
      - libyaml-dev
      - curl
      - expect
      - libcairo2-dev
      - libgirepository1.0-dev
      - uchardet
      - aptitude
    state: present

# create work folder "{{ work_folder }}"
- name: make sure there is a "{{ work_folder }}" folder
  file:
    path: "{{ work_folder }}"
    state: directory

# create log folder "{{ log_folder }}"
- name: make sure there is a "{{ log_folder }}" folder
  file:
    path: "{{ log_folder }}"
    state: directory
    mode: 0777

# ==> pip

# download install script
- name: Download get-pip.py
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: ~/Downloads/get-pip.py

# install pip in python 2
- name: Install pip in python 2
  become: yes
  become_user: root
  shell: python get-pip.py
  args:
    chdir: /home/{{ansible_user}}/Downloads

# install pip in python 3
- name: Install pip in python 3
  become: yes
  become_user: root
  shell: python3 get-pip.py
  args:
    chdir: /home/{{ansible_user}}/Downloads

# ==> virtualenv and virtualenvwrapper in python 3.
- name: install virtualenv and virtualenvwrapper
  become: yes
  become_user: root
  pip:
    executable: pip3
    name:
      - virtualenv
      - virtualenvwrapper
      - ipykernel
      - bagit

# create default virtaulenv folder "{{ virtualenv_folder }} for ansible user.
- name: make sure there is a {{ virtualenv_folder }} folder in ansible_user
  file:
    path: "{{ virtualenv_folder }}"
    state: directory

# create virtualenvwrapper project folder "~/work/vew-projects" in ansible_user home
- name: make sure there is a ~/work/vew-projects folder in ansible_user home
  file:
    path: "{{ virtualenv_project_folder }}"
    state: directory

# ==> add virtualenvwrapper stuff to ~/.bashrc for ansible_user

# add empty-ish line
- name: add empty-ish line
  lineinfile:
    path: '~/.bashrc'
    line: '# --'

# add comment saying we're setting up virtualenvwrapper
- name: set WORKON_HOME to $HOME/.virtualenvs
  lineinfile:
    path: '~/.bashrc'
    line: '# ==> virtualenvwrapper config'

# set VIRTUALENVWRAPPER_PYTHON to /usr/bin/python3
- name: set VIRTUALENVWRAPPER_PYTHON to /usr/bin/python3
  lineinfile:
    path: '~/.bashrc'
    line: 'export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3'

# set WORKON_HOME to {{ virtualenv_folder }}
- name: set WORKON_HOME to {{ virtualenv_folder }}
  lineinfile:
    path: '~/.bashrc'
    line: 'export WORKON_HOME={{ virtualenv_folder }}'

# set PROJECT_HOME to $HOME/work/vew-projects
- name: set PROJECT_HOME to $HOME/work/vew-projects
  lineinfile:
    path: '~/.bashrc'
    line: 'export PROJECT_HOME=$HOME/work/vew-projects'

# run /usr/local/bin/virtualenvwrapper.sh
- name: run /usr/local/bin/virtualenvwrapper.sh
  lineinfile:
    path: '~/.bashrc'
    line: 'source /usr/local/bin/virtualenvwrapper.sh'

# uncomment any commented deb-src lines in /etc/apt/sources.list
- name: uncomment any commented deb-src lines in /etc/apt/sources.list
  become: yes
  become_user: root
  replace:
    path: /etc/apt/sources.list
    regexp: '# deb-src'
    replace: 'deb-src'

# uncomment any commented deb lines in /etc/apt/sources.list
- name: uncomment any commented deb lines in /etc/apt/sources.list
  become: yes
  become_user: root
  replace:
    path: /etc/apt/sources.list
    regexp: '# deb'
    replace: 'deb'

# update apt cache
- name: Update apt cache
  become: yes
  become_user: root
  apt:
    update_cache: yes

# install build dependencies for pillow python package
- name: install pillow build dependencies
  become: yes
  become_user: root
  apt:
    name: pillow
    state: build-dep